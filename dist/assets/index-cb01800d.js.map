{"version":3,"file":"index-cb01800d.js","sources":["../../node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","../../node_modules/mdast-util-find-and-replace/lib/index.js","../../node_modules/mdast-util-gfm-autolink-literal/lib/index.js","../../node_modules/mdast-util-gfm-footnote/lib/index.js","../../node_modules/mdast-util-gfm-strikethrough/lib/index.js","../../node_modules/markdown-table/index.js","../../node_modules/mdast-util-gfm-table/lib/index.js","../../node_modules/mdast-util-gfm-task-list-item/lib/index.js","../../node_modules/mdast-util-gfm/lib/index.js","../../node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","../../node_modules/micromark-extension-gfm-footnote/lib/syntax.js","../../node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","../../node_modules/micromark-extension-gfm-table/lib/edit-map.js","../../node_modules/micromark-extension-gfm-table/lib/infer.js","../../node_modules/micromark-extension-gfm-table/lib/syntax.js","../../node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","../../node_modules/micromark-extension-gfm/index.js","../../node_modules/remark-gfm/lib/index.js"],"sourcesContent":["export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n"],"names":["escapeStringRegexp","string","findAndReplace","tree","list","options","ignored","convert","pairs","toPairs","pairIndex","visitParents","visitor","node","parents","index","grandparent","parent","siblings","handler","find","replace","start","change","nodes","match","position","matchObject","value","tupleOrList","result","tuple","toExpression","toFunction","escape","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transformGfmAutolinkLiterals","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","token","assert","findUrl","findEmail","_","protocol","domain","path","prefix","previous","isCorrectDomain","parts","splitUrl","atext","label","url","trailExec","trail","closingParenIndex","openingParens","ccount","closingParens","email","code","unicodeWhitespace","unicodePunctuation","footnoteReference","footnoteReferencePeek","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","normalizeIdentifier","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","state","info","tracker","exit","subexit","gfmFootnoteFromMarkdown","gfmFootnoteToMarkdown","firstLineBlank","footnoteDefinition","mapAll","mapExceptFirst","line","blank","constructsWithoutStrikethrough","handleDelete","peekDelete","gfmStrikethroughFromMarkdown","enterStrikethrough","exitStrikethrough","gfmStrikethroughToMarkdown","defaultStringLength","markdownTable","table","settings","align","stringLength","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","row","sizes","columnIndex","cell","serialize","size","toAlignment","before","after","lines","gfmTableFromMarkdown","enterTable","enterCell","enterRow","exitCodeText","exitTable","d","$0","$1","gfmTableToMarkdown","padding","alignDelimiters","around","inlineCodeWithTable","handleTable","handleTableCell","handleTableRow","serializeData","handleTableAsData","handleTableRowAsData","matrix","children","defaultHandlers","gfmTaskListItemFromMarkdown","exitCheck","exitParagraphWithTaskListItem","gfmTaskListItemToMarkdown","listItemWithTaskListItem","head","firstParaghraph","sibling","checkable","checkbox","check","gfmFromMarkdown","gfmToMarkdown","wwwPrefix","tokenizeWwwPrefix","tokenizeDomain","tokenizePath","tokenizeTrail","emailDomainDotTrail","tokenizeEmailDomainDotTrail","wwwAutolink","tokenizeWwwAutolink","previousWww","protocolAutolink","tokenizeProtocolAutolink","previousProtocol","emailAutolink","tokenizeEmailAutolink","previousEmail","text","gfmAutolinkLiteral","effects","ok","nok","self","dot","data","gfmAtext","previousUnbalanced","emailDomain","emailDomainAfter","emailDomainDot","asciiAlphanumeric","asciiAlpha","wwwStart","wwwAfter","buffer","seen","protocolStart","protocolPrefixInside","protocolSlashesInside","afterProtocol","asciiControl","markdownLineEndingOrSpace","protocolAfter","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeOpen","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","events","indent","tokenizeIndent","gfmFootnote","tokenizeDefinitionStart","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","tokenizeGfmFootnoteCall","tokenizePotentialGfmFootnoteCall","resolveToPotentialGfmFootnoteCall","defined","labelStart","id","context","call","marker","chunk","replacement","callStart","callData","callEscape","identifier","labelAtMarker","labelInside","labelAfter","labelEscape","factorySpace","whitespaceAfter","blankLine","afterPrefix","tail","gfmStrikethrough","single","tokenizer","tokenizeStrikethrough","resolveAllStrikethrough","open","strikethrough","nextEvents","insideSpan","splice","resolveAll","more","classifyCharacter","EditMap","remove","add","addImplementation","b","vecs","slice","element","editMap","at","gfmTableAlign","inDelimiterRow","event","alignIndex","gfmTable","tokenizeTable","resolveTable","sizeB","type","next","bodyRowStart","headRowBefore","headRowStart","headRowBreak","markdownLineEnding","headDelimiterStart","markdownSpace","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","currentTable","currentBody","currentCell","map","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","valueName","getPoint","now","relatedStart","relatedEnd","valueToken","end","a","tableBody","exits","related","side","tasklistCheck","tokenizeTasklistCheck","gfmTaskListItem","inside","close","spaceThenNonSpace","gfm","combineExtensions","emptyOptions","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]}